"""
Structured Query Handler
========================

This module is the primary handler for all standard (OOC) messages in the
new agentic architecture. It orchestrates the detection, retrieval, and
context-building process for structured and general queries.
"""

from typing import List, Dict, Any

from handlers.ai_logic.response_decision import ResponseDecision
from handlers.ai_logic.structured_query_detector import StructuredQueryDetector
from handlers.ai_wisdom.structured_content_retriever import StructuredContentRetriever
from handlers.ai_wisdom.wisdom_engine import WisdomEngine
from handlers.ai_logic.logic_engine import LogicEngine

def handle_structured_message(user_message: str, conversation_history: List[Dict]) -> ResponseDecision:
    """
    Orchestrates the handling of a standard (OOC) message using the structured query system.

    Args:
        user_message: The user's input message.
        conversation_history: The history of the conversation.

    Returns:
        A ResponseDecision object containing the strategy for the AI.
    """
    print("ðŸš€ Handling message with Structured Query Handler")
    
    # 1. Detect the query structure
    detector = StructuredQueryDetector()
    structured_query = detector.detect_query(user_message)
    print(f"   - Detected query structure: {structured_query}")

    # Instantiate retriever early to use its db_controller
    retriever = StructuredContentRetriever()

    # If the query is general, use the LogicEngine to determine the category
    if structured_query.get('type') == 'general':
        print("   - General query detected, invoking LogicEngine to determine category...")
        logic_engine = LogicEngine()
        
        # Get all available categories from the database to help the LLM choose.
        all_categories = retriever.db_controller.get_all_categories()
        
        category = logic_engine.determine_query_category(user_message, all_categories)
        structured_query['category'] = category
        print(f"   - LogicEngine determined category: {category}")

    # 2. Retrieve content based on the detected structure
    results = retriever.get_content(structured_query)
    print(f"   - Retrieved {len(results)} results from database")

    # 3. Build the final context for the LLM using the appropriate builder
    context_builder = WisdomEngine()
    
    # The strategy now includes the results for the context builder
    strategy = {
        'approach': structured_query.get('type', 'comprehensive'),
        'subject': structured_query.get('term') or structured_query.get('subject'),
        'results': results,
        'temporal_type': structured_query.get('log_type'),
        'category': structured_query.get('category')
    }
    
    final_context = context_builder.build_context_for_strategy(strategy, user_message)

    # 4. Create the final ResponseDecision
    # In the new system, the context IS the pre-generated response for the next stage
    return ResponseDecision(
        needs_ai_generation=True,
        pre_generated_response=final_context,
        strategy={
            'approach': 'agentic_system',
            'reasoning': 'Response generated by the new structured query system.'
        }
    )

def _build_strategy_from_query(query: Dict[str, Any], results: List[Dict]) -> Dict[str, Any]:
    """
    Creates the strategy dictionary needed for the StandardContextBuilder.
    """
    query_type = query.get('type')
    
    # Default strategy
    strategy = {
        'approach': 'comprehensive',
        'subject': query.get('term') or query.get('subject') or query.get('query'),
        'results': results,
        'needs_database': True,
        'reasoning': f"Structured query of type '{query_type}' detected.",
        'context_priority': 'high'
    }

    if query_type == 'logs':
        strategy['approach'] = 'logs'
        if query.get('modifier') in ['latest', 'first']:
            strategy['approach'] = 'temporal_logs'
            strategy['temporal_type'] = query.get('modifier')
            
    elif query_type in ['ship', 'character', 'species', 'planet', 'explicit']:
        strategy['approach'] = 'comprehensive'

    elif query_type == 'general':
        strategy['approach'] = 'comprehensive'
        strategy['subject'] = query.get('query')

    return strategy 