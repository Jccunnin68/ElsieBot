services:
  db_populator:
    build:
      context: ../db_populator
      dockerfile: Dockerfile
    container_name: elsiebrain_populator_dev
    env_file:
      - ../.env
    environment:
      - DB_HOST=host.docker.internal
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_PORT=5433
    networks:
      - elsie_dev_network
    restart: "no"  # Run once and exit

  devcontainer:
    image: mcr.microsoft.com/devcontainers/base:ubuntu
    volumes:
      - ../..:/workspaces:cached
      - /var/run/docker.sock:/var/run/docker-host.sock
    command: /bin/sh -c "while sleep 1000; do :; done"
    networks:
      - elsie_dev_network
    environment:
      - DOCKER_HOST=unix:///var/run/docker-host.sock

  ai_agent:
    build:
      context: ../ai_agent
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    env_file:
      - ../.env
    environment:
      - PORT=8000
      - GEMMA_API_KEY=${GEMMA_API_KEY}
      - DB_HOST=host.docker.internal
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_PORT=5433
    networks:
      - elsie_dev_network
    volumes:
      - ../ai_agent:/app
      - /app/venv
    command: ["./start.sh"]
    depends_on:
      - db_populator
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  discord_bot:
    build:
      context: ../discord_bot
      dockerfile: Dockerfile.dev
    env_file:
      - ../.env
    environment:
      - AI_AGENT_URL=http://ai_agent:8000
      - GEMMA_API_KEY=${GEMMA_API_KEY}
      - DISCORD_TOKEN=${DISCORD_TOKEN}
    networks:
      - elsie_dev_network
    volumes:
      - ../discord_bot:/app
      - ../.env:/app/.env:ro
    depends_on:
      ai_agent:
        condition: service_healthy
    command: ["go", "run", "main.go"]

volumes:
  elsiebrain_data_dev:
    driver: local

networks:
  elsie_dev_network:
    driver: bridge 