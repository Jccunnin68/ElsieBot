name: Deploy Elsie to AWS (Terraform)

# This workflow is INACTIVE by default
# To activate: Set ENABLE_AWS_DEPLOYMENT=true in repository secrets
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      terraform_action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy

env:
  AWS_REGION: us-east-2
  PROJECT_NAME: elsie
  TF_VAR_project_name: elsie
  TF_VAR_aws_region: us-east-2
  TF_VAR_environment: ${{ github.event.inputs.environment }}

jobs:
  terraform:
    runs-on: ubuntu-latest
    # SAFETY: This prevents accidental runs - remove this condition to activate
    if: vars.ENABLE_AWS_DEPLOYMENT == 'true'
    environment: 
      name: aws-${{ github.event.inputs.environment }}
    
    defaults:
      run:
        working-directory: infra
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "~1.0"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="bucket=${{ secrets.AWS_TERRAFORM_BUCKET }}" \
          -backend-config="key=elsie/${{ github.event.inputs.environment }}/terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}"
      working-directory: infra

    - name: Terraform Validate
      run: terraform validate terraform-aws.tf

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan \
          -target="terraform-aws.tf" \
          -var="discord_token=${{ secrets.DISCORD_TOKEN }}" \
          -var="gemma_api_key=${{ secrets.GEMMA_API_KEY }}" \
          -var="db_password=${{ secrets.DB_PASSWORD }}" \
          -out=tfplan-aws
      env:
        TF_VAR_discord_token: ${{ secrets.DISCORD_TOKEN }}
        TF_VAR_gemma_api_key: ${{ secrets.GEMMA_API_KEY }}
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

    - name: Comment Plan on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const output = `#### Terraform AWS Plan ðŸ“–
          
          <details><summary>Show Plan</summary>
          
          \`\`\`terraform
          ${{ steps.plan.outputs.stdout }}
          \`\`\`
          
          </details>
          
          *Environment:* \`${{ github.event.inputs.environment }}\`
          *Pusher:* @${{ github.actor }}
          *Action:* \`${{ github.event.inputs.terraform_action }}\``;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Apply
      if: github.event.inputs.terraform_action == 'apply'
      run: terraform apply tfplan-aws

    - name: Terraform Destroy
      if: github.event.inputs.terraform_action == 'destroy'
      run: |
        terraform destroy \
          -var="discord_token=${{ secrets.DISCORD_TOKEN }}" \
          -var="gemma_api_key=${{ secrets.GEMMA_API_KEY }}" \
          -var="db_password=${{ secrets.DB_PASSWORD }}" \
          -auto-approve
      env:
        TF_VAR_discord_token: ${{ secrets.DISCORD_TOKEN }}
        TF_VAR_gemma_api_key: ${{ secrets.GEMMA_API_KEY }}
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

    - name: Output Infrastructure Info
      if: github.event.inputs.terraform_action == 'apply'
      run: |
        echo "## AWS Infrastructure Deployed ðŸš€" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "**Region:** ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Outputs" >> $GITHUB_STEP_SUMMARY
        terraform output -json | jq -r 'to_entries[] | "- **\(.key):** \(.value.value)"' >> $GITHUB_STEP_SUMMARY

  build-and-push:
    runs-on: ubuntu-latest
    needs: terraform
    if: github.event.inputs.terraform_action == 'apply' && vars.ENABLE_AWS_DEPLOYMENT == 'true'
    environment: 
      name: aws-${{ github.event.inputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Get ECR repository URLs
      id: ecr-repos
      run: |
        cd infra
        AI_AGENT_REPO=$(terraform output -raw ecr_ai_agent_repository_url)
        DISCORD_BOT_REPO=$(terraform output -raw ecr_discord_bot_repository_url)
        DB_POPULATOR_REPO=$(terraform output -raw ecr_db_populator_repository_url)
        
        echo "ai-agent-repo=$AI_AGENT_REPO" >> $GITHUB_OUTPUT
        echo "discord-bot-repo=$DISCORD_BOT_REPO" >> $GITHUB_OUTPUT
        echo "db-populator-repo=$DB_POPULATOR_REPO" >> $GITHUB_OUTPUT

    - name: Build and push AI Agent
      run: |
        docker build -t ${{ steps.ecr-repos.outputs.ai-agent-repo }}:${{ github.sha }} \
                     -t ${{ steps.ecr-repos.outputs.ai-agent-repo }}:latest \
                     -f ai_agent/Dockerfile ai_agent/
        docker push ${{ steps.ecr-repos.outputs.ai-agent-repo }}:${{ github.sha }}
        docker push ${{ steps.ecr-repos.outputs.ai-agent-repo }}:latest

    - name: Build and push Discord Bot
      run: |
        docker build -t ${{ steps.ecr-repos.outputs.discord-bot-repo }}:${{ github.sha }} \
                     -t ${{ steps.ecr-repos.outputs.discord-bot-repo }}:latest \
                     -f discord_bot/Dockerfile discord_bot/
        docker push ${{ steps.ecr-repos.outputs.discord-bot-repo }}:${{ github.sha }}
        docker push ${{ steps.ecr-repos.outputs.discord-bot-repo }}:latest

    - name: Build and push DB Populator
      run: |
        docker build -t ${{ steps.ecr-repos.outputs.db-populator-repo }}:${{ github.sha }} \
                     -t ${{ steps.ecr-repos.outputs.db-populator-repo }}:latest \
                     -f db_populator/Dockerfile db_populator/
        docker push ${{ steps.ecr-repos.outputs.db-populator-repo }}:${{ github.sha }}
        docker push ${{ steps.ecr-repos.outputs.db-populator-repo }}:latest

    - name: Update ECS Services
      run: |
        aws ecs update-service --cluster ${{ env.PROJECT_NAME }}-cluster --service ${{ env.PROJECT_NAME }}-ai-agent --force-new-deployment
        aws ecs update-service --cluster ${{ env.PROJECT_NAME }}-cluster --service ${{ env.PROJECT_NAME }}-discord-bot --force-new-deployment
        aws ecs update-service --cluster ${{ env.PROJECT_NAME }}-cluster --service ${{ env.PROJECT_NAME }}-db-populator --force-new-deployment

    - name: Wait for deployment
      run: |
        aws ecs wait services-stable --cluster ${{ env.PROJECT_NAME }}-cluster --services ${{ env.PROJECT_NAME }}-ai-agent
        aws ecs wait services-stable --cluster ${{ env.PROJECT_NAME }}-cluster --services ${{ env.PROJECT_NAME }}-discord-bot
        aws ecs wait services-stable --cluster ${{ env.PROJECT_NAME }}-cluster --services ${{ env.PROJECT_NAME }}-db-populator

    - name: Deployment Success
      run: |
        echo "## AWS Deployment Complete! ðŸŽ‰" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "All services have been updated and are running stable." >> $GITHUB_STEP_SUMMARY 